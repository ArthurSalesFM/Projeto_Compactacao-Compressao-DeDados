package Telas;

import Algoritmos.LZW;
import Algoritmos.RunLength;
import LetrasAleatorias.GeradorDeLetrasAleatorias;
import ManipulaArquivos.GerenciadorDeArquivos;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Arthur Felipe MS
 */
public class TelaPrincipal extends javax.swing.JFrame {
    
    private long[] tempoDeExecusaoRL = new long[6];
    private long[] tempoDeExecusaoLZW = new long[6];

    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() {  
        
        initComponents();
        setLocationRelativeTo(null);
        
        // Define a operação padrão de fechar
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnIniciarProcesso = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compactação e Compressão de Dados - UEPB - ARTHUR 2024.2");
        setResizable(false);

        btnIniciarProcesso.setText("Iniciar");
        btnIniciarProcesso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarProcessoActionPerformed(evt);
            }
        });
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(218, Short.MAX_VALUE)
                .addComponent(btnIniciarProcesso, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(202, 202, 202))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(btnIniciarProcesso, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarProcessoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarProcessoActionPerformed
         
        btnIniciarProcesso.setEnabled(false);
        
        
        GeradorDeLetrasAleatorias gerador = new GeradorDeLetrasAleatorias();
        GerenciadorDeArquivos ger = new GerenciadorDeArquivos();
        RunLength runL = new RunLength();
        LZW lzw = new LZW();
        
        String textosGerados = "";
        String textosLidos = "";
        long tempoInicio;
        long tempoFinal;
        long tempoExecusao;
 
        
        /*
            CRIAÇÃO DOS ARQUIVOS BASE
            
            Arquivos de 1000(mil), 10000(dez mil) e 100000 (cem mil)
        */           
        textosGerados = gerador.gerarSequenciaDeLetrasAleatorias(1000);
        ger.escreverNoArquivo("milLetrasOriginal.txt", textosGerados);
        
        textosGerados = gerador.gerarSequenciaDeLetrasAleatorias(10000);        
        ger.escreverNoArquivo("dezMilLetrasOriginal.txt", textosGerados);
        
        textosGerados = gerador.gerarSequenciaDeLetrasAleatorias(100000);     
        ger.escreverNoArquivo("cemMilLetrasOriginal.txt", textosGerados);
        
        
        /*
            Processo Run-Lenght
        */
        // Com 1000
        textosLidos = ger.lerArquivo("milLetrasOriginal.txt");        
        tempoInicio = System.nanoTime();
        textosLidos = runL.compactar(textosLidos);
        tempoFinal = System.nanoTime();
        tempoExecusao = tempoFinal - tempoInicio;
        tempoDeExecusaoRL[0] = tempoExecusao;
        ger.escreverNoArquivo("milLetrasCompactadoRunLength.txt", textosLidos);
             
        tempoInicio = System.nanoTime();
        textosLidos = runL.descompactar(textosLidos);
        tempoFinal = System.nanoTime();
        tempoExecusao = tempoFinal - tempoInicio;
        tempoDeExecusaoRL[1] = tempoExecusao;
        ger.escreverNoArquivo("milLetrasDescompactadoRunLength.txt", textosLidos);
        
        
        // Com 10000
        textosLidos = ger.lerArquivo("dezMilLetrasOriginal.txt");        
        tempoInicio = System.nanoTime();
        textosLidos = runL.compactar(textosLidos);
        tempoFinal = System.nanoTime();
        tempoExecusao = tempoFinal - tempoInicio;
        tempoDeExecusaoRL[2] = tempoExecusao;
        ger.escreverNoArquivo("dezMilLetrasCompactadoRunLength.txt", textosLidos);
             
        tempoInicio = System.nanoTime();
        textosLidos = runL.descompactar(textosLidos);
        tempoFinal = System.nanoTime();
        tempoExecusao = tempoFinal - tempoInicio;
        tempoDeExecusaoRL[3] = tempoExecusao;
        ger.escreverNoArquivo("dezMilLetrasDescompactadoRunLength.txt", textosLidos);
        
        // Com 100000
        textosLidos = ger.lerArquivo("cemMilLetrasOriginal.txt");        
        tempoInicio = System.nanoTime();
        textosLidos = runL.compactar(textosLidos);
        tempoFinal = System.nanoTime();
        tempoExecusao = tempoFinal - tempoInicio;
        tempoDeExecusaoRL[4] = tempoExecusao;
        ger.escreverNoArquivo("cemMilLetrasCompactadoRunLength.txt", textosLidos);
             
        tempoInicio = System.nanoTime();
        textosLidos = runL.descompactar(textosLidos);
        tempoFinal = System.nanoTime();
        tempoExecusao = tempoFinal - tempoInicio;
        tempoDeExecusaoRL[5] = tempoExecusao;
        ger.escreverNoArquivo("cemMilLetrasDescompactadoRunLength.txt", textosLidos);
        
        
        
        /*
            Processo LZW
        */
        //1000
        textosLidos = ger.lerArquivo("milLetrasOriginal.txt");        
        tempoInicio = System.nanoTime();
        textosLidos = lzw.compactar(textosLidos);
        tempoFinal = System.nanoTime();
        tempoExecusao = tempoFinal - tempoInicio;
        tempoDeExecusaoLZW[0] = tempoExecusao;
        ger.escreverNoArquivo("milLetrasCompactadoLZW.txt",textosLidos);
             
        tempoInicio = System.nanoTime();
        textosLidos = lzw.descompactar(textosLidos);
        tempoFinal = System.nanoTime();
        tempoExecusao = tempoFinal - tempoInicio;
        tempoDeExecusaoLZW[1] = tempoExecusao;
        ger.escreverNoArquivo("milLetrasDescompactadoLZW.txt", textosLidos);
        
        /// *********************
        
        // Com 10000
        textosLidos = ger.lerArquivo("dezMilLetrasOriginal.txt");        
        tempoInicio = System.nanoTime();
        textosLidos = lzw.compactar(textosLidos);
        tempoFinal = System.nanoTime();
        tempoExecusao = tempoFinal - tempoInicio;
        tempoDeExecusaoLZW[2] = tempoExecusao;
        ger.escreverNoArquivo("dezMilLetrasCompactadoLZW.txt", textosLidos);
             
        tempoInicio = System.nanoTime();
        textosLidos = lzw.descompactar(textosLidos);
        tempoFinal = System.nanoTime();
        tempoExecusao = tempoFinal - tempoInicio;
        tempoDeExecusaoLZW[3] = tempoExecusao;
        ger.escreverNoArquivo("dezMilLetrasDescompactadoLZW.txt", textosLidos);
        
        // Com 100000
        textosLidos = ger.lerArquivo("cemMilLetrasOriginal.txt");        
        tempoInicio = System.nanoTime();
        textosLidos = lzw.compactar(textosLidos);
        tempoFinal = System.nanoTime();
        tempoExecusao = tempoFinal - tempoInicio;
        tempoDeExecusaoLZW[4] = tempoExecusao;
        ger.escreverNoArquivo("cemMilLetrasCompactadoLZW.txt", textosLidos);
             
        tempoInicio = System.nanoTime();
        textosLidos = lzw.descompactar(textosLidos);
        tempoFinal = System.nanoTime();
        tempoExecusao = tempoFinal - tempoInicio;
        tempoDeExecusaoLZW[5] = tempoExecusao;
        ger.escreverNoArquivo("cemMilLetrasDescompactadoLZW.txt", textosLidos);
                
        JOptionPane.showMessageDialog(null, "Caminho dos arquivos gerados:\n src/main/Arquivos", "Informação dos arquivos", JOptionPane.INFORMATION_MESSAGE);
        
        btnIniciarProcesso.setEnabled(true);
        
    }//GEN-LAST:event_btnIniciarProcessoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIniciarProcesso;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
